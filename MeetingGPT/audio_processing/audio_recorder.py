import os
import logging
import time
from datetime import datetime
import numpy as np
import av
import pydub
from streamlit_webrtc import WebRtcMode, webrtc_streamer
import streamlit as st

# Configura√ß√£o do logger
logging.basicConfig(
    filename='audio_recorder.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Diret√≥rio para salvar os √°udios
AUDIO_SAVE_PATH = r'C:\Users\Novaes Engenharia\MeetingGPT\data\audio'
os.makedirs(AUDIO_SAVE_PATH, exist_ok=True)

class AudioRecorder:
    def __init__(self):
        """ Inicializa o gravador de √°udio. """
        self.audio_data = pydub.AudioSegment.empty()
        self.is_recording = False
        st.session_state["audio_ready"] = False
        logging.debug("‚úÖ AudioRecorder inicializado.")

    def start_recording(self):
        """ Inicia a grava√ß√£o de √°udio usando streamlit-webrtc. """
        try:
            if self.is_recording:
                logging.warning("‚ö†Ô∏è Tentativa de iniciar uma grava√ß√£o j√° em andamento.")
                return

            logging.info("üé¨ Iniciando o webrtc_streamer...")
            st.session_state["webrtc_ctx"] = webrtc_streamer(
                key="audio_capture",
                mode=WebRtcMode.SENDONLY,
                audio_receiver_size=1024,
                media_stream_constraints={"audio": True, "video": False},
            )

            self.is_recording = True
            logging.info("üü¢ Grava√ß√£o iniciada com sucesso.")
            st.write("üéôÔ∏è Gravando... Pressione o bot√£o para parar.")
        except Exception as e:
            logging.error(f"‚ùå Erro ao iniciar a grava√ß√£o: {e}")
            st.error(f"Erro ao iniciar a grava√ß√£o: {e}")

    def stop_recording(self):
        """ Finaliza a grava√ß√£o de √°udio e salva o arquivo. """
        try:
            if not self.is_recording:
                logging.warning("‚ö†Ô∏è Tentativa de parar uma grava√ß√£o que n√£o est√° em andamento.")
                st.warning("‚ö†Ô∏è Nenhuma grava√ß√£o ativa encontrada.")
                return

            self.is_recording = False
            webrtc_ctx = st.session_state.get("webrtc_ctx")

            if webrtc_ctx and webrtc_ctx.audio_receiver:
                frames = webrtc_ctx.audio_receiver.get_frames(timeout=1)
                if frames:
                    self.audio_data = self.process_audio(frames)
                    st.session_state["audio_ready"] = True
                    logging.info("üî¥ Grava√ß√£o finalizada com sucesso.")
                    st.write("üî¥ Grava√ß√£o finalizada.")
                else:
                    logging.warning("‚ö†Ô∏è Nenhum √°udio foi capturado.")
                    st.warning("‚ö†Ô∏è Nenhum √°udio foi capturado.")
            else:
                logging.error("‚ùå Nenhuma conex√£o de √°udio ativa encontrada.")
                st.error("Erro ao capturar o √°udio.")
        except Exception as e:
            logging.error(f"‚ùå Erro ao parar a grava√ß√£o: {e}")
            st.error(f"Erro ao parar a grava√ß√£o: {e}")

    def process_audio(self, frames):
        """ Processa os frames de √°udio e retorna um objeto AudioSegment. """
        audio_segment = pydub.AudioSegment.empty()
        try:
            for frame in frames:
                sound = pydub.AudioSegment(
                    data=frame.to_ndarray().tobytes(),
                    sample_width=frame.format.bytes,
                    frame_rate=frame.sample_rate,
                    channels=len(frame.layout.channels),
                )
                audio_segment += sound
            logging.info("‚úÖ √Åudio processado com sucesso.")
        except Exception as e:
            logging.error(f"‚ùå Erro ao processar frames de √°udio: {e}")
        return audio_segment

    def save_audio(self, filename=None):
        """ Salva o √°udio gravado em um arquivo .wav. """
        try:
            if not st.session_state.get("audio_ready"):
                logging.error("‚ùå Nenhum √°udio capturado para salvar.")
                raise RuntimeError("Nenhum √°udio capturado para salvar.")

            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"audio_{timestamp}.wav"

            filepath = os.path.join(AUDIO_SAVE_PATH, filename)
            self.audio_data.export(filepath, format="wav")

            logging.info(f"‚úÖ √Åudio salvo com sucesso: {filepath}")
            return filepath
        except Exception as e:
            logging.error(f"‚ùå Erro ao salvar o √°udio: {e}")
            st.error(f"Erro ao salvar o √°udio: {e}")
            raise RuntimeError(f"Erro ao salvar o √°udio: {e}")

# Exemplo de uso no Streamlit
if __name__ == "__main__":
    st.title("üéôÔ∏è Gravador de √Åudio - Streamlit WebRTC")
    recorder = AudioRecorder()

    if st.button("‚ñ∂Ô∏è Iniciar Grava√ß√£o"):
        try:
            recorder.start_recording()
        except Exception as e:
            st.error(f"Erro ao iniciar grava√ß√£o: {e}")

    if st.button("‚èπÔ∏è Parar Grava√ß√£o"):
        try:
            recorder.stop_recording()
            if st.session_state["audio_ready"]:
                filepath = recorder.save_audio()
                st.success(f"‚úÖ √Åudio salvo em: {filepath}")
            else:
                st.warning("‚ö†Ô∏è Nenhum √°udio foi capturado. Verifique as permiss√µes do microfone e tente novamente.")
        except Exception as e:
            st.error(f"Erro ao parar grava√ß√£o: {e}")
